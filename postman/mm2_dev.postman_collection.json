{
	"info": {
		"_postman_id": "fbe98b62-4cb8-4fe4-9eff-b3c756cd9ab4",
		"name": "mm2_dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16279216"
	},
	"item": [
		{
			"name": "Legacy",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "Electrum",
							"item": [
								{
									"name": "electrum UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"RICK\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10017\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10017\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10017\"\r\n        }\r\n    ]\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "electrum ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "electrum QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"QTUM\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10050\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10050\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10050\"\r\n        }\r\n    ]\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "electrum QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"QC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10050\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10050\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10050\"\r\n        }\r\n    ],\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "electrum BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"tBCH\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electroncash.de:50003\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"tbch.loping.net:60001\"\r\n        },\r\n        {\r\n            \"url\": \"blackie.c3-soft.com:60001\"\r\n        },\r\n        {\r\n            \"url\": \"bch0.kister.net:51001\"\r\n        }\r\n    ],\r\n    \"bchd_urls\": [\"https://bchd-testnet.electroncash.de:18335\"]\r\n    // \"allow_slp_unsafe_conf\": false,\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "electrum SLPTOKEN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"sTST\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enable",
							"item": [
								{
									"name": "enable UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"RICK\"\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "enable ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "enable QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QTUM\"\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "enable QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QC\",\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "enable BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"tBCH\",\r\n    \"bchd_urls\": [\"https://bchd-testnet.electroncash.de:18335\"]\r\n    // \"allow_slp_unsafe_conf\": false,\r\n    // \"mm2\": 1, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "enable SLPTOKEN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"sTST\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "disable_coin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"disable_coin\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "convertaddress",
							"item": [
								{
									"name": "convertaddress UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBTC-TEST\",\r\n    \"from\": \"mtQvKcJQnSqdjapPpSpAwJYikhx2QU1KSd\",\r\n    \"to_address_format\": {\r\n        \"format\": \"segwit\" // Accepted values: \"standard\", \"segwit\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "convertaddress ETH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"ETH\",\r\n    \"from\": \"0xa7A44759fa3902B304B51a3cA216f9cd8a01878a\",\r\n    \"to_address_format\": {\r\n        \"format\": \"mixedcase\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "convertaddress QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"QTUM\",\r\n    \"from\": \"QZVx8rW99tHCPcRoXDAHEf82PyJ2g9VZRn\",\r\n    \"to_address_format\": {\r\n        \"format\": \"contract\" // Accepted values: \"wallet\", \"contract\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "convertaddress BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBCH\",\r\n    \"from\": \"bchtest:qzxh2lsx5z78ez6szxl0qef8cccsg9euwcu00sv2n2\",\r\n    \"to_address_format\": {\r\n        \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "convert_utxo_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convert_utxo_address\",\r\n    \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"to_coin\": \"tBTC-TEST\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "withdraw",
							"item": [
								{
									"name": "withdraw UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"RICK\",\r\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"amount\": 1.025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n    //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n    // } // Default: Coin Config\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "withdraw ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"ETH\",\r\n    \"to\": \"0x60b56cde26535caD3d8AB7b54bfA2689A3C1e134\",\r\n    \"amount\": 0.0025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"EthGas\",\r\n    //     \"gas_price\": \"3.5\", // Default: Max from [\"gas_station_url\", \"eth_gasPrice\" call, \"eth_feeHistory\" call]\r\n    //     \"gas\": 55000 // Default: from \"estimate_gas\" call\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								},
								{
									"name": "withdraw QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"QC\",\r\n    \"to\": \"QZVx8rW99tHCPcRoXDAHEf82PyJ2g9VZRn\",\r\n    \"amount\": 10 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"Qrc20Gas\",\r\n    //     \"gas_limit\": 100000,\r\n    //     \"gas_price\": 40\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "http://127.0.0.1:7783",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "7783"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "kmd_rewards_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"kmd_rewards_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "my_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_tx_history\",\r\n    \"coin\": \"RICK\"\r\n    // \"from_id\": null, // Accepted values: Strings\r\n    // \"max\": false,\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1, // used only if: \"from_id\": null\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "send_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"RICK\",\r\n    \"tx_hex\": \"0400008085202f8901ebec086d37ee2526668c4d3e8cbf381c09894f8fa32a237f9544cf036faaa61100000000d74730440220505b138301498c3b9ca86eee170f6ee6aa1023a8c1ce52b4648073e102849ce6022009293a0e928cc6a0a2a540606a0e578693f32e205054b268bfd0c569884ca22a0120b4e3edc80c28c4d470ff0ca415da8cd74210b5eb64fe4703a41e74d7d45bdafb004c6b630473a13061b1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a91478daeddb10bd92635a15360cdadf5f674e4f38888821031ac6d25833a5961e2a8822b2e8b0ac1fd55d90cbbbb18a780552cbd66fc02bb3ac68ffffffff01b8820100000000001976a9149a85cc05e9a722575feb770a217c73fd6145cf0188ac73a13061000000000000000000000000000000\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "show_priv_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"show_priv_key\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "validateaddress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"validateaddress\",\r\n    \"coin\": \"RICK\",\r\n    \"address\": \"RPNERS8TK1MeRo7xBthgaNsF2vL4236zX8\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"best_orders\",\r\n    \"coin\": \"RICK\",\r\n    \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n    \"volume\": 1.1\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "buy WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "cancel_all_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_all_orders\",\r\n    \"cancel_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Pair\", \"Coin\"\r\n        // \"data\": {\r\n        //     \"base\": \"RICK\", // Required only if: \"type\": \"Pair\"\r\n        //     \"rel\": \"MORTY\" // Required only if: \"type\": \"Pair\"\r\n        //     // \"ticker\": \"RICK\" // Required only if: \"type\": \"Coin\"\r\n        // } // Required only if: \"type\": \"Pair\", \"type\": \"Coin\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "cancel_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_order\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "max_taker_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"max_taker_vol\",\r\n    \"coin\": \"RICK\"\r\n    // \"trade_with\": \"RICK\" // Default: \"coin\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "min_trading_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"min_trading_vol\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "my_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_orders\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "orders_history_by_filter WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orders_history_by_filter\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "order_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "orderbook_depth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook_depth\",\r\n    \"pairs\":[[\"RICK\",\"MORTY\"],[\"BTC\",\"KMD\"],[\"DOGE\",\"KMD\"]]\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "sell WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sell\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "setprice WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"setprice\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "update_maker_order WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"update_maker_order\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "active_swaps WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "all_swaps_uuids_by_filter WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"all_swaps_uuids_by_filter\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "coins_needed_for_kick_start WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"coins_needed_for_kick_start\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_trade_fee WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_trade_fee\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "import_swaps WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"import_swaps\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "my_recent_swaps WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "my_swap_status WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_swap_status\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "recover_funds_of_swap WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"recover_funds_of_swap\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "set_required_confirmations WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_required_confirmations\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "set_requires_notarization WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_requires_notarization\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "stats_swap_status WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stats_swap_status\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage WIP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"trade_preimage\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P2P",
					"item": [
						{
							"name": "ban_pubkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"ban_pubkey\",\r\n    \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n    \"reason\": \"test\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_peer_topics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_peer_topics\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_topic_peers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_topic_peers\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_my_peer_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_my_peer_id\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_peers_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_peers_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "get_relay_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_relay_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "list_banned_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"list_banned_pubkeys\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "unban_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"unban_pubkeys\",\r\n    \"unban_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Few\"\r\n        // \"data\": [\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520560\"\r\n        // ] // Required only if: \"type\": \"Few\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "mm2 Info",
					"item": [
						{
							"name": "help",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"help\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "metrics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"metrics\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"version\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stop",
					"item": [
						{
							"name": "sim_panic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sim_panic\"\r\n    // \"mode\": \"\" // Accepted values: \"\", \"simple\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						},
						{
							"name": "stop",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stop\"\r\n}\r\n"
								},
								"url": {
									"raw": "http://127.0.0.1:7783",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "7783"
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": []
		}
	]
}